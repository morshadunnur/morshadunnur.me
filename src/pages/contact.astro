---
import Layout from '../layouts/Layout.astro';

// For static builds, we'll handle form submission on the client side
let formStatus = '';
---

<Layout title="Contact | Morshad Unnur - Shopify Developer" description="Get in touch with Morshad Unnur for Shopify development services, custom theme development, and app integration.">
  <div class="bg-gradient-to-r from-primary to-secondary text-white py-20">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <h1 class="text-3xl md:text-4xl font-bold mb-4 mt-8">Contact Me</h1>
      <p class="text-xl">Let's discuss how I can help with your Shopify store.</p>
    </div>
  </div>
  
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-12">
      <div>
        <h2 class="text-2xl font-bold mb-6">Get in Touch</h2>
        
        <div id="success-message" class="mb-6 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative hidden" role="alert">
          <strong class="font-bold">Thank you!</strong>
          <span class="block sm:inline"> Your message has been sent successfully. I'll get back to you soon.</span>
        </div>
        
        <div id="error-message" class="mb-6 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative hidden" role="alert">
          <strong class="font-bold">Oops!</strong>
          <span class="block sm:inline"> Something went wrong. Please try again or contact me directly via email.</span>
        </div>
        
        <form class="space-y-6" id="contactForm">
          <div>
            <label for="name" class="block text-sm font-medium text-gray-700">Name</label>
            <input type="text" name="name" id="name" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary" required />
          </div>
          <div>
            <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
            <input type="email" name="email" id="email" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary" required />
          </div>
          <div>
            <label for="subject" class="block text-sm font-medium text-gray-700">Subject</label>
            <input type="text" name="subject" id="subject" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary" required />
          </div>
          <div>
            <label for="message" class="block text-sm font-medium text-gray-700">Message</label>
            <textarea name="message" id="message" rows="5" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary" required></textarea>
          </div>
          <div>
            <button type="submit" class="inline-flex items-center px-4 py-2 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-primary hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary">
              Send Message
            </button>
          </div>
        </form>
      </div>
      
      <!-- Rest of your contact page remains unchanged -->
    </div>
  </div>
</Layout>

<script>
  // Client-side form handling
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('contactForm');
    const successMessage = document.getElementById('success-message');
    const errorMessage = document.getElementById('error-message');
    
    // Google Sheets script URL
    const googleScriptUrl = 'https://script.google.com/macros/s/AKfycbzT1zuqcQfL6C4wGnQEQb3Jk2B1sNKe1f3OmWq_RMz61k9yrug723kngP19pjsCCNExMA/exec';
    
    // Discord webhook URL
    const discordWebhookUrl = 'https://discord.com/api/webhooks/1353416848871391362/fOi851l7QjzffH-yMFZ3sdyVxfE2OmfqH3JXhVbmKDGTkBbimvPooWPOyhZX6I2thYXy';
    
    if (form) {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        // Hide any existing messages
        successMessage.classList.add('hidden');
        errorMessage.classList.add('hidden');
        
        // Get form data
        const formData = new FormData(form);
        const formProps = Object.fromEntries(formData);
        
        try {
          // Send to Google Sheets
          const googleResponse = await fetch(googleScriptUrl, {
            method: 'POST',
            body: JSON.stringify({
              name: formProps.name,
              email: formProps.email,
              subject: formProps.subject,
              message: formProps.message,
              timestamp: new Date().toISOString()
            }),
            headers: {
              'Content-Type': 'application/json'
            }
          });
          
          // Send to Discord
          const discordResponse = await fetch(discordWebhookUrl, {
            method: 'POST',
            body: JSON.stringify({
              content: `New contact form submission!`,
              embeds: [{
                title: `${formProps.subject}`,
                description: `${formProps.message}`,
                color: 5814783, // Teal color
                fields: [
                  {
                    name: 'Name',
                    value: `${formProps.name}`,
                    inline: true
                  },
                  {
                    name: 'Email',
                    value: `${formProps.email}`,
                    inline: true
                  },
                  {
                    name: 'Timestamp',
                    value: new Date().toLocaleString(),
                    inline: false
                  }
                ]
              }]
            }),
            headers: {
              'Content-Type': 'application/json'
            }
          });
          
          if (googleResponse.ok && discordResponse.ok) {
            // Show success message
            successMessage.classList.remove('hidden');
            form.reset();
            
            // Scroll to success message
            successMessage.scrollIntoView({ behavior: 'smooth', block: 'center' });
          } else {
            // Show error message
            errorMessage.classList.remove('hidden');
            console.error('Form submission failed');
          }
        } catch (error) {
          // Show error message
          errorMessage.classList.remove('hidden');
          console.error('Error submitting form:', error);
        }
      });
    }
  });
</script>